{
    "projects": [
        {
            "title": "Packet Sniffing and Spoofing Lab",
            "description": "This project report delves into an extensive exploration of packet sniffing and spoofing within the domain of network security. Crafted by Demarcus Simmons for the CNT4403 course at the University of West Florida, this report presents a detailed hands-on experience with the tools and techniques employed for packet analysis and manipulation.<br><br>Objective:<br>The primary goal of this assignment was to gain practical insights into the threats posed by packet sniffing and spoofing in network communication. By employing tools like Scapy, the project aimed to comprehend these threats as foundational elements in understanding and implementing robust security measures in networking.<br><br>Approach and Methodology:<br>The project utilized a set of materials including the Python programming language, Scapy (Python library), VMware (Ubuntu), and Docker. The experiments were meticulously executed and documented in a step-by-step manner, facilitated by the Docker environment that orchestrated the setup of containers involved in the experimentation process.<br><br>Key Experiments Conducted:<br><br>Packet Sniffing:<br><br>Task 1.1A: Sniffer Setup and Packet Capture: Employed a Python program (simple_sniffer.py) to capture packets, initially encountering permission issues resolved by executing the program with administrative rights.<br>Task 1.1B: Packet Filtering: Modified the sniffer program to filter specific packet types, observing captured packets based on various filter parameters.<br>ICMP Packet Spoofing:<br><br>Task 1.2: Spoofing ICMP Packets: Demonstrated the creation of ICMP echo request packets with arbitrary source IP addresses using Scapy, observing packet reception on a receiver VM via Wireshark.<br>Traceroute Analysis:<br><br>Task 1.3: Traceroute: Utilized a Python program to estimate the number of routers between source and destination by incrementing the Time-To-Live (TTL) field in ICMP packets and observing ICMP echo replies.<br>Integration of Sniffing and Spoofing:<br><br>Task 1.4: Sniffing and-then Spoofing: Further experiments involving the integration of packet sniffing and subsequent spoofing techniques.<br>Conclusion:<br>The project report encapsulates the in-depth exploration of these fundamental network security threats, emphasizing their implications and the significance of robust security measures. It provides a comprehensive understanding of packet interception and manipulation, essential for devising effective network defense strategies.",
            "tags": ["Python","Docker","NetSecurity"],
            "images": ["Images/sniffing_spoofing.jpg"],
            "videos": [],
            "resourceLinks": [
                {
                    "type": "pdf",
                    "url": "resources/CNT4403-Assignment1.pdf"
                }
            ],
            "externalLinks": [
            ]
        },
        {
            "title": "Local DNS Attack Lab",
            "description": "Objective:<br>Demarcus Simmons conducted an in-depth investigation into local DNS cache poisoning attacks for the CNT4403 course at the University of West Florida. The report aimed to explore DNS functionality and its security implications, particularly focusing on attacker strategies targeting DNS servers.<br><br>Approach and Tools Used:<br>Utilizing Python, Scapy, VMware (Ubuntu), and Docker, the assignment followed a sequential task-based methodology. Docker facilitated the setup of a controlled lab environment, integral for conducting various experiments and tasks.<br><br>Key Tasks Conducted:<br><br>Testing the DNS Setup:<br>Initial tests involved verifying DNS query results for specific domain addresses, confirming legitimate responses from the local DNS server.<br><br>Attack Tasks:<br><br>Task 1: Direct Spoofing Response to User:<br>Conducted a user-based attack by sending spoofed DNS replies, showcasing successful receipt but limited impact due to transient results.<br><br>Task 2: DNS Cache Poisoning Attack – Spoofing Answers:<br>Targeted the local DNS server to execute a cache poisoning attack, influencing a specific hostname's stored result in the DNS cache.<br><br>Task 3: Spoofing NS Records:<br>Focused on manipulating the authority section in DNS replies to affect multiple domain names under a specific domain, successfully poisoning the authoritative section.<br><br>Conclusion:<br>The report's findings highlighted a comprehensive understanding of DNS operations and diverse attack vectors, providing insights into mitigating local DNS attacks and fortifying network security measures.",
            "tags": ["Python","Docker","NetSecurity"],
            "images": ["Images/DNSattack.jpg"],
            "videos": [],
            "resourceLinks": [
                {
                    "type": "pdf",
                    "url": "resources/CNT4403-Assignment2.pdf"
                }
            ],
            "externalLinks": [
            ]
        },
        {
            "title": "MD5 Collision Attack Lab",
            "description": "Objective:<br>For the CNT4403 course at the University of West Florida, Demarcus Simmons conducted a hands-on exploration of one-way hash functions focusing on the impact of collision attacks. The lab aimed to comprehend the repercussions of breaking collision resistance in a widely-used one-way hash function, particularly targeting the MD5 hash function with actual collision attacks.<br><br>Materials and Methods:<br>The materials used in this assignment include the C programming language, Python programming language, and VMware (Ubuntu). The assignment proceeded through a series of tasks, methodically completed and documented in sequential order.<br><br>Task 1: Generating Two Different Files with the Same MD5 Hash<br>Task 1 involved generating two distinct files that share identical MD5 hash values. Utilizing a collision generator program provided, two files ('out1.bin' & 'out2.bin') were created with differing content yet producing the same MD5 hash. Despite file differences, both files generated the same MD5 hash.<br><br>Task 2: Understanding MD5’s Property<br>This task aimed to comprehend specific properties of the MD5 algorithm, emphasizing the Merkle-Damgard construction. Concatenating arbitrary suffix files to 'out1.bin' and 'out2.bin', the resulting files ('M || T' and 'N || T') produced identical MD5 hashes, affirming the property of MD5 wherein the hash remains constant despite the appended data.<br><br>Task 3: Generating Two Executable Files with the Same MD5 Hash<br>By manipulating a C program, two disparate versions with identical hash values were created. Parsing the program into prefix, 128-byte region, and suffix segments, adjustments were made to generate two distinct executables ('a1.out' & 'a2.out') with matching MD5 hashes.<br><br>Conclusion:<br>The lab findings underscore the significance of one-way hash functions in cryptography. Insights gained into collision attacks, length extension attacks, and the strengths and weaknesses of hashing algorithms empower the recognition and prevention of vulnerabilities. This knowledge differentiation between secure (e.g., SHA-2) and insecure (e.g., MD5) hashing algorithms enables the effective implementation of secure hashing in various applications.",
            "tags": ["Python","C","NetSecurity"],
            "images": ["Images/MD5collision.jpg"],
            "videos": [],
            "resourceLinks": [
                {
                    "type": "pdf",
                    "url": "resources/CNT4403-Assignment5.pdf"
                }
            ],
            "externalLinks": [
            ]
        },
        {
            "title": "Network Management Security Tool: Snort",
            "description": "Abstract Summary:<br>This collaborative project involved three students aiming to gain proficiency in utilizing a Network Security Management tool (NSM), particularly focusing on investigating and evaluating the capabilities of the Snort tool within a virtual network topology created in VMWare. Leveraging Ubuntu Linux as the operating system and Docker for network topology configuration, the team employed Snort for comprehensive network traffic analysis.<br><br>Detail Description of the Tool:<br>Snort, a free Open Source Intrusion Prevention and Intrusion Detection System (IPS/IDS), monitors IP network traffic, identifying potentially malicious activities. Originally developed by Martin Roesch in 1998, it is currently maintained by Cisco. Operating primarily through command-line interface, Snort operates in three modes: Sniffer mode, Packet Logger mode, and Network Intrusion Detection System (NIDS) mode, offering varying levels of traffic analysis and logging.<br><br>Features of Snort:<br><br>Real-time traffic monitoring: Enables prompt detection of malicious activities with third-party programs like swatch or syslog-ng for real-time alerting.<br>Packet logging: Captures and logs network traffic in various formats for monitoring and auditing purposes.<br>Protocol analysis: Allows detailed inspection of potentially harmful data packets through protocol layer analysis.<br>Content matching: Categorizes rules by protocol and content, optimizing performance, especially for protocols like HTTP.<br>OS fingerprinting: Determines hosts' operating systems based on packet header formats.<br>Compatibility: Easily installable on various OS environments like Windows and Linux.<br>Open Source: Free and open-source software, providing users with flexibility in usage.<br>Easy rule implementation: Provides an intuitive signature-based rule system for network defense.<br><br>Architecture and Methodology:<br>The team created two virtual networks, one using VMs and another using Docker containers. Each network involved multiple machines acting as clients and servers, with Snort configured on the server to log packets from client connections.<br><br>Demonstration and Description:<br>To evaluate Snort, the team simulated TCP and spoofing attacks on a victim machine, customizing rules within the local.rules file. The demonstration included:<br><br>Tracing TCP protocol's 3-way handshake<br>Logging different network traffic types using custom rules<br>Creating rules to detect TCP SYN flood attacks<br><br>References:<br>The report includes references to various Snort manuals, user guides, and informative resources from Cisco, Amazon Web Services, LinuxSecurity.com, among others.<br><br>Contributions:<br><br>Marcus Simmons: Conducted research, tested tool in Docker setup, documented findings.<br>Zane Sampey: Assisted in network setup, rule development, added demonstration screenshots, proofread report.<br>Miles Brown: Designed network topology, researched Snort, tested tool with custom rules, contributed to the report and slides.",
            "tags": ["IDS","IPS","NetSecurity"],
            "images": ["Images/snort.jpg"],
            "videos": [],
            "resourceLinks": [
                {
                    "type": "pdf",
                    "url": "resources/Final Project Report - CNT4403.pdf"
                },
                {
                    "type": "powerpoint",
                    "url": "resources/Snort Demo CNT4403.pptx"
                }
            ],
            "externalLinks": [
            ]
        },
        {
            "title": "Recursive Descent Parser",
            "description": "This project involved the creation of a recursive descent parser responsible for parsing a basic programming language and transforming its syntax into an intermediate language format. Utilizing the C programming language, I developed this parser, accompanied by a bash script 'run' to execute the program with various file inputs.<br><br>Technical Approach:<br>The project centered around designing and implementing a recursive descent parser in C. This parser served as a critical component in interpreting the syntax and structure of the specified programming language. With a focus on algorithmic precision, I ensured the parser accurately deciphered the language's grammar rules and constructs.<br><br>Execution and Testing:<br>To evaluate the parser's functionality and assess its performance, I meticulously planned a series of test scenarios. The 'run' bash script facilitated automated testing, enabling the parser's execution with diverse input files. This systematic approach allowed thorough testing across different code structures and edge cases, ensuring the parser's robustness.<br><br>Key Contributions:<br>- Designing and implementing a recursive descent parser in C<br>- Developing a versatile bash script ('run') for automated testing across various input files<br>- Conducting comprehensive testing to validate the parser's accuracy and robustness<br>- Generating an intermediate language format from parsed programming language source code<br><br>Conclusion:<br>This project served as an instrumental learning experience in language processing and compiler design. The development of the recursive descent parser provided valuable insights into theoretical language parsing concepts while emphasizing the significance of meticulous testing and algorithmic precision in software development.",
            "tags": ["C","Bash"],
            "images": ["Images/RDP.jpg"],
            "videos": [],
            "resourceLinks": [
            ],
            "externalLinks": [
                {
                    "site": "github",
                    "url": "https://github.com/dmarc2/RecursiveDescentParser/tree/main"
                }
            ]
        },
        {
            "title": "FSA Generator",
            "description": "This project entailed the development of a Finite State Automaton (FSA) generator using Python, integrating a graphical user interface (GUI) to visualize the generated FSA. Additionally, the system utilized Lisp programming to determine the acceptance or rejection of provided inputs by the FSA. The project workflow involved structuring the FSA, inputting its configuration, and subsequently evaluating user-defined inputs against the FSA.<br><br>Technical Components:<br>The core functionality centered around a Python-based FSA generator equipped with a GUI module. This allowed users to define and visualize the FSA's structure conveniently. Lisp programming was harnessed to perform validation checks, determining the acceptance or rejection of input sequences based on the provided FSA configuration.<br><br>Workflow and Testing Automation:<br>The project facilitated testing through two provided batch files:<br>p1.bat: Used for testing the part1.lsp program, validating the correctness of the Lisp-based validation program in accurately accepting or rejecting input sequences.<br>p2.bat: Dedicated to testing the Python-generated part2.lsp file, ensuring its ability to correctly accept or reject input sequences as per the FSA's specifications.<br>The batch files streamlined the testing process, ensuring rigorous validation and functionality checks for both the Lisp and Python components of the system.<br><br>Key Features:<br>Python-based FSA generator with a user-friendly GUI for visual representation<br>Integration of Lisp programming for acceptance/rejection determination<br>Inputting FSA configuration and sequences for validation<br>Automated testing using batch files (p1.bat and p2.bat) for validation checks<br><br>Conclusion:<br>This project amalgamated Python's versatility in GUI development with Lisp's logical evaluation capabilities to construct a robust FSA generator and validator. The integration of automated testing using batch files facilitated comprehensive validation, ensuring the accuracy of acceptance/rejection determinations against specified FSA configurations.",
            "tags": ["Python", "Lisp", "Batch"],
            "images": ["Images/FSA.jpg"],
            "videos": [],
            "resourceLinks": [
            ],
            "externalLinks": [
                {
                    "site": "github",
                    "url": "https://github.com/dmarc2/FSAGenerator"
                }
            ]
        },
        {
            "title": "Snake Game",
            "description": "As part of a summer coding camp aimed at freshman students, I developed a recreation of the timeless Snake game using Python. The primary objective of this project was to introduce foundational concepts of Object-Oriented Programming (OOP) and illustrate various fundamental programming constructs through an engaging and familiar game experience.<br><br>Technical Approach:<br>Utilizing Python's versatility, I meticulously crafted the Snake game, showcasing the principles of OOP to structure the game's elements such as the snake, food, and game board. By implementing classes and objects, I highlighted the importance of encapsulation, inheritance, and polymorphism in programming paradigms.<br><br>Educational Purpose:<br>The project served as an interactive learning tool, providing freshman students with a hands-on introduction to OOP and essential programming concepts. Through the Snake game's development, participants were exposed to key programming fundamentals like control flow, data structures, and user interaction, fostering a deeper understanding of software development principles.<br><br>Significance for Beginners:<br>The recreation of the Snake game was strategically chosen for its simplicity and intuitive gameplay, making it an ideal entry point for novice programmers. By engaging with this project, students were encouraged to explore coding in a fun and interactive manner, laying a strong foundation for their journey into the world of programming.<br><br>Key Features:<br>Recreation of the classic Snake game using Python<br>Emphasis on Object-Oriented Programming (OOP) principles<br>Introduction to basic programming constructs through gameplay<br>Engaging and interactive learning experience for freshman students<br><br>Conclusion:<br>This project's culmination in the form of a playable Snake game provided an interactive platform for freshman students to delve into the realms of OOP and fundamental programming concepts. By blending education with entertainment, the project successfully fostered a conducive environment for learning while igniting enthusiasm for further exploration in the field of programming.",
            "tags": ["Python", "Game"],
            "images": ["Images/snakegame_sc.png"],
            "videos": [],
            "resourceLinks": [
            ],
            "externalLinks": [
                {
                    "site": "github",
                    "url": "https://github.com/dmarc2/SnakeGame/tree/main"
                }
            ]
        },
        {
            "title": "Tic-Tac-Toe Game",
            "description": "This project was developed during a summer coding camp aimed at freshman students, offering an immersive introduction to programming concepts using Python. The creation of a Tic Tac Toe game served as a hands-on educational tool, providing participants with an engaging platform to grasp Python fundamentals, explore the Pygame library, and gain insight into Object-Oriented Programming (OOP) concepts.<br><br>Educational Objectives:<br>The primary aim of this project was twofold: Firstly, to familiarize students with Python's syntax and core functionalities, emphasizing its application in game development. Secondly, to introduce the utilization of the Pygame library, enabling students to comprehend graphical user interface (GUI) design and event-driven programming.<br><br>Learning Python and Pygame:<br>Through the implementation of the Tic Tac Toe game, students were encouraged to explore Python's syntax, data structures, and logical constructs while working on an interactive project. Additionally, utilizing Pygame facilitated an understanding of game development techniques, including rendering graphics, handling user inputs, and managing game states.<br><br>Introduction to OOP Concepts:<br>This project also served as a segue into Object-Oriented Programming (OOP) principles. By structuring game components such as the board, players, and game logic as objects, students were introduced to key OOP concepts like encapsulation, inheritance, and abstraction, fostering a deeper comprehension of software design paradigms.<br><br>Significance for Beginners:<br>The choice of implementing Tic Tac Toe strategically catered to its simplicity, allowing novice programmers to grasp fundamental programming concepts through an easily understandable and universally recognized game.<br><br>Key Features:<br>Creation of a Python-based Tic Tac Toe game for educational purposes<br>Introduction to Python programming and Pygame library fundamentals<br>Exploration of OOP concepts through game structure and design<br>Engaging and interactive learning experience for freshman students<br><br>Conclusion:<br>The development of the Tic Tac Toe game using Python and Pygame within the context of a summer coding camp provided an ideal entry point for freshman students to immerse themselves in programming fundamentals. By combining educational content with a fun game project, the initiative successfully ignited students' interest in Python programming while offering valuable insights into game development and OOP principles.",
            "tags": ["Python", "Game"],
            "images": ["Images/tictactoe_sc.png"],
            "videos": [],
            "resourceLinks": [
            ],
            "externalLinks": [
                {
                    "site": "github",
                    "url": "https://github.com/dmarc2/TicTacToe-Game/tree/main"
                }
            ]
        }
    ]
}